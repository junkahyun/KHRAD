@RequestMapping({"/rad/question/questionView.kh"})
  public ModelAndView questionView(HttpServletRequest req, HttpServletResponse res)
  {
    ModelAndView mav = null;
    Map<String, Object> model = new HashMap();
    Map<String, String> params = getParameters(req, null);
    Map<String, Object> map = null;
    List<Map<String, String>> list = null;
    List<Map<String, String>> counselorList = null;
    List<String> aList = null;
    this.logger.debug("QuestionView!!!!");
    try
    {
      Map<String, String> user = (Map)req.getSession().getAttribute("aduser");
      params.put("site_id", (String)user.get("site_id"));
      params.put("quest_no", (String)params.get("no"));
      
      map = this.questionService.selectQuestionView(params);
      if (map.get("req_comment") != null) {
        map.put("req_comment", ((String)map.get("req_comment")).replaceAll("<br>", "\n"));
      }
      list = this.questionService.selectQuestionMemo(params);
      counselorList = this.questionService.selectCounselor(params);
      
      StringBuffer name = new StringBuffer();
      aList = this.studentService.selectCity();
      for (int i = 0; i < aList.size(); i++)
      {
        if (i != 0) {
          name.append("_");
        }
        name.append((String)aList.get(i));
      }
      int stdt_no = this.questionService.selectCurrStdtByQno(params);
      if ("kh".equals(params.get("site_id")))
      {
        int user_no = this.questionService.selectUserNoBySno(stdt_no);
        model.put("user_no", Integer.valueOf(user_no));
      }
      model.put("params", params);
      model.put("stdt_no", Integer.valueOf(stdt_no));
      model.put("cities", name);
      
      params.put("stdt_no", stdt_no);
      model.put("preEvalCount", Integer.valueOf(this.currService.existPreEvalByStdt(params)));
      model.put("preLearningMap", this.currService.selectPreLearningViewByStdt(params));
      model.put("preLearningList", this.currService.selectPreLearningLatest(params));
      model.put("counselorList", counselorList);
      
      int share_issue_no = this.questionService.selectShareIssueNo(params);
      model.put("share_issue_no", Integer.valueOf(share_issue_no));
      params.put("share_issue_no", share_issue_no);
      
      int share_issue_comment_no = this.questionService.selectShareIssueCommentNo(params);
      model.put("share_issue_comment_no", Integer.valueOf(share_issue_comment_no));
      params.put("share_issue_comment_no", share_issue_comment_no);
      
      String stdtNoList = stdt_no;
      List MediaRatingList = this.currService.selectBoardMediaRating(params, stdtNoList);
      
      Map mediaMap = new HashMap();
      mediaMap = (Map)MediaRatingList.get(0);
      
      Set<String> keys = mediaMap.keySet();
      for (String key : keys) {
        model.put(key, mediaMap.get(key));
      }
      model.put("data", map);
      
      model.put("list", list);
      mav = new ModelAndView("/WEB-INF/jsp/rad/question/" + (String)params.get("site_id") + "/questionView_" + (String)params.get("site_id") + ".jsp", model);
    }
    catch (Exception e)
    {
      this.logger.error("questionView method error ", e);
      model.put("result", "0");
      model.put("message", "[문의관리 상세 보기]:[" + e.getMessage() + "]");
      mav = new ModelAndView("/WEB-INF/jsp/common/error.jsp", model);
    }
    return mav;
  }
  
  @RequestMapping({"/rad/question/disposableLink.kh"})
  public ModelAndView disposableLink(HttpServletRequest req, HttpServletResponse res)
  {
    ModelAndView mav = null;
    Map<String, Object> model = new HashMap();
    Map<String, String> params = getParameters(req, null);
    
    this.logger.debug("disposableLink!!!!");
    Map<String, String> user = (Map)req.getSession().getAttribute("aduser");
    try
    {
      int result = 1;
      
      Calendar cal = Calendar.getInstance();
      Calendar currentDate = Calendar.getInstance();
      currentDate.add(5, 3);
      
      String nowPlusThree = currentDate.get(1);
      if (currentDate.get(2) < 9) {
        nowPlusThree = nowPlusThree + "0";
      }
      nowPlusThree = nowPlusThree + (currentDate.get(2) + 1);
      if (currentDate.get(5) < 10) {
        nowPlusThree = nowPlusThree + "0";
      }
      nowPlusThree = nowPlusThree + currentDate.get(5);
      
      String authenticCode = this.authorityManager.getEncryptString((String)params.get("quest_no") + nowPlusThree + (String)params.get("curr_branch") + (String)params.get("train_month"));
      
      String currentURL = Utils.getPropertyData("resno.address");
      
      this.logger.info("일회성링크 : " + (String)user.get("name") + " " + (String)user.get("id"));
      if (result == 1)
      {
        String email = this.questionService.getStdtEmail(params);
        
        String link = currentURL + "?&authenticCode=" + authenticCode;
        StringBuilder content = new StringBuilder();
        model.put("link", link);
      }
      else
      {
        model.put("link", "");
      }
      model.put("params", params);
      mav = new ModelAndView("jsonView", model);
    }
    catch (Exception e)
    {
      this.logger.error("disposableLink method error ", e);
      model.put("result", "0");
      model.put("message", "[]:[" + e.getMessage() + "]");
      mav = new ModelAndView("jsonView", model);
    }
    return mav;
  }
  
  @RequestMapping({"/rad/question/questionSave.kh"})
  public ModelAndView questionSave(HttpServletRequest req, HttpServletResponse res)
  {
    ModelAndView mav = null;
    Map<String, Object> model = new HashMap();
    Map<String, String> params = getParameters(req, null);
    int result = 0;
    
    this.logger.debug("questionSave!!!!");
    try
    {
      Map<String, String> user = (Map)req.getSession().getAttribute("aduser");
      params.put("address", (String)params.get("address_city") + "_" + (String)params.get("address_gun") + "_" + (String)params.get("address_etc"));
      
      System.out.println("params@questionSave.kh=" + params);
      if ("updateProspects".equals(params.get("mode"))) {
        result = this.questionService.updateQuestionProspects(params);
      } else {
        result = this.questionService.updateQuestion(params);
      }
      params.put("reg_id", (String)user.get("id"));
      params.put("curr_pre_learning_no", (String)params.get("preLearning"));
      params.put("old_curr_pre_learning_no", (String)params.get("old_preLearning"));
      if (params.get("curr_pre_learning_no") != null) {
        this.currService.updatePreLearningAtt(params);
      }
      model.put("params", params);
      model.put("result", Integer.valueOf(result));
     
      
      mav = new ModelAndView("jsonView", model);
    }
    catch (Exception e)
    {
      this.logger.error("questionSave method error ", e);
      model.put("result", "0");
      model.put("message", "[]:[" + e.getMessage() + "]");
      mav = new ModelAndView("jsonView", model);
    }
    return mav;
  }
  
  @RequestMapping({"/rad/question/questionMemoForm.kh"})
  public ModelAndView counselLoggerForm(HttpServletRequest req, HttpServletResponse res)
  {
    ModelAndView mav = null;
    Map<String, Object> model = new HashMap();
    Map<String, String> params = getParameters(req, null);
    List<Map<String, String>> list = null;
    Map<String, String> map = null;
    Calendar cal = Calendar.getInstance();
    try
    {
      System.out.println("params@questionMemoForm.kh=" + params);
      
      model.put("curr", this.currService.selectCurrView(params));
      if ("update".equals(params.get("mode")))
      {
        map = this.questionService.selectQuestionMemoView(params);
        map.put("comment", ((String)map.get("comment")).replaceAll("<br>", "\n"));
        model.put("data", map);
      }
      model.put("params", params);
      mav = new ModelAndView("/WEB-INF/jsp/rad/question/" + (String)params.get("site_id") + "/questionMemoForm_" + (String)params.get("site_id") + ".jsp", model);
    }
    catch (Exception e)
    {
      this.logger.error("questionMemoForm method error ", e);
      model.put("result", "0");
      model.put("message", "[]:[" + e.getMessage() + "]");
      mav = new ModelAndView("/WEB-INF/jsp/common/error.jsp", model);
    }
    return mav;
  }
  
  @RequestMapping({"/rad/question/checkUserMasterPop.kh"})
  public ModelAndView checkUserMaster(HttpServletRequest req, HttpServletResponse res)
  {
    ModelAndView mav = null;
    Map<String, Object> model = new HashMap();
    Map<String, String> params = getParameters(req, null);
    List<Map<String, String>> list = null;
    Map<String, String> map = null;
    Calendar cal = Calendar.getInstance();
    try
    {
      System.out.println("params@checkUserMaster.kh=" + params);
      
      list = this.questionService.checkUserMaster(params);
      
      model.put("list", list);
      model.put("params", params);
      mav = new ModelAndView("/WEB-INF/jsp/rad/question/kh/checkUserMasterForm.jsp", model);
    }
    catch (Exception e)
    {
      this.logger.error("questionMemoForm method error ", e);
      model.put("result", "0");
      model.put("message", "[]:[" + e.getMessage() + "]");
      mav = new ModelAndView("/WEB-INF/jsp/common/error.jsp", model);
    }
    return mav;
  }
